#!/usr/bin/env python
import cv2
import numpy as np

class OneHot:
	
	plate_encoder = {
		'A': tuple([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'B': tuple([0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'C': tuple([0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'D': tuple([0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'E': tuple([0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'F': tuple([0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'G': tuple([0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'H': tuple([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]), 
		'I': tuple([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'J': tuple([0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'K': tuple([0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'L': tuple([0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'M': tuple([0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'N': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'O': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'P': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'Q': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'R': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'S': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'T': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'U': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'V': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'W': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0]),
		'X': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0]),
		'Y': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]),
		'Z': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0]),
		'0': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0]),
		'1': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0]),
		'2': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0]),
		'3': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0]),
		'4': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0]),
		'5': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0]),
		'6': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0]),
		'7': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0]),
		'8': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0]),
		'9': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]),
		'!': tuple([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
	}
	plate_decoder = {a:b for b, a in plate_encoder.items()}

	ps_encoder = {
		'1' : tuple([1,0,0,0,0,0,0,0]),
		'2' : tuple([0,1,0,0,0,0,0,0]),
		'3' : tuple([0,0,1,0,0,0,0,0]),
		'4' : tuple([0,0,0,1,0,0,0,0]),
		'5' : tuple([0,0,0,0,1,0,0,0]),
		'6' : tuple([0,0,0,0,0,1,0,0]),
		'7' : tuple([0,0,0,0,0,0,1,0]),
		'8' : tuple([0,0,0,0,0,0,0,1]),
	}

	ps_decoder = {a:b for b, a in ps_encoder.items()}

	# Crops input data
	# Parameter: img = cv2 image of the parking spot and plate
	# Returns: ps = cv2 image of parking spot number, c1 = cv2 image of 2nd plate character, c1 = cv2 image of 2nd plate character,
	#		   c3 = cv2 image of 3rd plate character, c4 = cv2 image of 4th plate character
	def crop(self,img):
		dim1 = (50, 50)
		dim2 = (60,60)
		park_num = cv2.resize(img,dim1, interpolation = cv2.INTER_AREA)
		plate = cv2.resize(img,dim2, interpolation = cv2.INTER_AREA)
		
		h1, w1, c1 = park_num.shape
		ps = park_num[0:int(0.65 *h1),int(w1/2):w1]
		h2, w2, c1 = park_num.shape
		c1 = plate[int(2*h2/3): h2, 0 : int(0.28*w2) +1]
		c2 = plate[int(2*h2/3): h2, int(0.22*w2): int(0.5*w2)]
		c3 = plate[int(2*h2/3): h2, int(0.5*w2): int(0.78*w2)+1]
		c4 = plate[int(2*h2/3): h2, int(0.72*w2):w2]

		return ps, c1, c2, c3, c4	

	# Generates the datasets for both CNNs
	# Parameters: files = list of image file names, path = folder containing the images
	# Returns:
	# X_ps = Array of parking number images 
	# Y_ps = Array of parking number label (encoded)
	# X_plate = Array of license plate character images
	# Y_plate = Array of license plate characters (encoded)
	def get_X_and_Y(self,files, path):
		X_ps = []
		Y_ps = []
		X_plate = []
		Y_plate = []
		for i in files:
			image = cv2.imread(path + i)
			ps, c1, c2, c3, c4  = self.crop(image) 
			X_ps += [ps]
			Y_ps += [self.ps_encoder[i[1]]]
			X_plate += [c1] + [c2] + [c3] + [c4]
			Y_plate += [self.plate_encoder[i[3]]] + [self.plate_encoder[i[4]]] + [self.plate_encoder[i[5]]] + [self.plate_encoder[i[6]]]

		return np.array(X_ps), np.array(Y_ps), np.array(X_plate), np.array(Y_plate)